import os
import json
from SCons.Script import *

print("Running SConstruct in:", Dir(".").abspath)

# Generate commands for clangd
def generate_compile_commands(target, source, env):
    commands = []
    for src in source:
        command = {
            "directory": os.getcwd(),
            "file": os.path.abspath(str(src)),
            "output": "",
            "arguments": [
                "g++",
                "-std=c++17",
                "-fPIC",
            ] + [f"-I{os.path.abspath(inc)}" for inc in env["CPPPATH"]] + [
                "-c",
                os.path.abspath(str(src))
            ]
        }
        commands.append(command)
    with open('compile_commands.json', 'w') as f:
        json.dump(commands, f, indent=2)
    print("âœ… compile_commands.json generated with", len(commands), "entries.")


project_root = os.path.abspath(os.path.join(os.getcwd(), "../.."))
terrain_generator_root = os.path.abspath(os.getcwd())
godot_cpp_root = os.path.abspath(os.path.join(terrain_generator_root, "../../godot-cpp"))

print("Project root:", project_root)
print("Godot-cpp root:", godot_cpp_root)
print("Terrain Generator root:", terrain_generator_root)

env = Environment(tools=["default"])
env.Append(CPPFLAGS=["-std=c++17"])

env.Append(CPPPATH=[
    os.path.join(godot_cpp_root, "gdextension"),
    os.path.join(godot_cpp_root, "include"),
    os.path.join(godot_cpp_root, "include/godot_cpp"),
    os.path.join(godot_cpp_root, "gen/include"),
    os.path.join(terrain_generator_root, "src/thirdparty"),
    os.path.join(terrain_generator_root, "thirdparty"),
])


# Append library path and libraries.
env.Append(LINKFLAGS=["-shared"])  # Ensure shared library compilation
env.Append(LIBPATH=["../../godot-cpp/bin"])
env.Append(LIBS=["libgodot-cpp.linux.template_debug.x86_64.a"])

# Debug: print out the CPPPATH.
print("CPPPATH list after append:", env["CPPPATH"])
print("Substituted CPPPATH:", env.subst("$CPPPATH"))

# Determine platform and target.
platform = ARGUMENTS.get("platform", "linux")
if platform == "linux":
    target_lib = "bin/libchunk_generator.so"
elif platform == "windows":
    target_lib = "bin/chunk_generator.dll"
else:
    target_lib = "bin/libchunk_generator.so"  # Default to Linux naming

# Ensure the bin directory exists.
if not os.path.exists("bin"):
    os.makedirs("bin")

# Gather source files.
sources = Glob("src/**/*.cpp") + Glob("src/register_types.cpp") 
for src in sources:
    print("Target files path", src.get_path()) # Print for debugging


# Build the shared library.
build_target = env.SharedLibrary(target_lib, sources)

# Option 1: Post-action on the default build target.
# This will run generate_compile_commands after building the shared library.
env.AddPostAction(build_target, lambda target, source, env: generate_compile_commands(target, [src.get_path() for src in sources], env))
