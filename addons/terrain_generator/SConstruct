import os
import json
from SCons.Script import *

print("Running SConstruct in:", Dir(".").abspath)

# Generate commands for clangd
def generate_compile_commands(target, source, env):
    commands = []
    for obj in source:
        command = {
            "directory": os.getcwd(),
            "file": str(obj.sources[0]),
            "output": str(obj),
            "arguments": env.subst('$CXXCOM').split()
        }
        commands.append(command)
    with open('compile_commands.json', 'w') as f:
        json.dump(commands, f, indent=2)

# Create the build environment.
env = Environment(tools=["default"])
env.Append(CPPFLAGS=["-std=c++17"])

# Append include directories.
env.Append(CPPPATH=[
    "../../godot-cpp/gdextension",
    "../../godot-cpp/include",
    "../../godot-cpp/include/godot_cpp",
    "../../godot-cpp/gen/include",
    "src/thirdparty",
    "thirdparty"
])

# Hook into the build process to generate compile_commands.json
env.AddPostAction('.', generate_compile_commands)

# Append library path and libraries.
env.Append(LIBPATH=["../../godot-cpp/bin"])
env.Append(LIBS=["godot-cpp.linux.template_release.x86_64"])

# Debug: print out the CPPPATH.
print("CPPPATH list after append:", env["CPPPATH"])
print("Substituted CPPPATH:", env.subst("$CPPPATH"))

# Determine platform; you can also use sys.platform if needed.
platform = ARGUMENTS.get("platform", "linux")
if platform == "linux":
    target = "bin/libchunk_generator.so"
elif platform == "windows":
    target = "bin/chunk_generator.dll"
else:
    target = "bin/libchunk_generator.so"  # Default to Linux naming

# Ensure the bin directory exists.
if not os.path.exists("bin"):
    os.makedirs("bin")

# Gather source files. Ensure all your source files are here.
sources = Glob("src/*.cpp")

# Build the shared library.
env.SharedLibrary(target, sources)
